// Generated by Bisonc++ V6.04.03 on Tue, 15 Feb 2022 18:39:11 +0100

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {316, 2}, // 1: input ->  input defVarOrFun
     {316, 1}, // 2: input ->  defVarOrFun
     {318, 0}, // 3: syntaxCloseParen ->  <empty>
     {319, 0}, // 4: syntaxCommaOrSemicol ->  <empty>
     {320, 0}, // 5: syntaxCommaOrCloseparen ->  <empty>
     {321, 0}, // 6: syntaxExpression ->  <empty>
     {322, 0}, // 7: syntaxIdentifier ->  <empty>
     {323, 0}, // 8: syntaxInit ->  <empty>
     {324, 0}, // 9: syntaxOpenCurly ->  <empty>
     {325, 0}, // 10: syntaxSemicol ->  <empty>
     {326, 0}, // 11: syntaxTypename ->  <empty>
     {327, 0}, // 12: opValue ->  <empty>
     {328, 1}, // 13: openCurly ('{') ->  '{'
     {329, 1}, // 14: closeCurly ('}') ->  '}'
     {330, 1}, // 15: closeParenBreakOK (')') ->  ')'
     {331, 1}, // 16: varType_ (INT) ->  INT
     {331, 1}, // 17: varType_ (STRINGTYPE) ->  STRINGTYPE
     {331, 1}, // 18: varType_ (LIST) ->  LIST
     {332, 2}, // 19: varType ->  varType_ syntaxIdentifier
     {333, 2}, // 20: string_ (STRING) ->  string_ STRING
     {333, 1}, // 21: string_ (STRING) ->  STRING
     {334, 1}, // 22: string ->  string_
     {335, 1}, // 23: cast (INT) ->  INT
     {335, 1}, // 24: cast (LIST) ->  LIST
     {335, 1}, // 25: cast (STRINGTYPE) ->  STRINGTYPE
     {335, 1}, // 26: cast (BOOL) ->  BOOL
     {336, 1}, // 27: identifier (IDENTIFIER) ->  IDENTIFIER
     {337, 1}, // 28: argsExpr ->  expression
     {337, 2}, // 29: argsExpr (ORDER) ->  ORDER opValue
     {338, 3}, // 30: args (',') ->  args ',' argsExpr
     {338, 1}, // 31: args ->  argsExpr
     {339, 0}, // 32: argsNull ->  <empty>
     {340, 1}, // 33: argsOpt ->  args
     {340, 1}, // 34: argsOpt ->  argsNull
     {341, 1}, // 35: defineVar_ ->  identifier
     {342, 1}, // 36: defineVar ->  defineVar_
     {342, 4}, // 37: defineVar ('=') ->  defineVar_ '=' syntaxExpression expression
     {343, 4}, // 38: globalVars (',') ->  globalVars ',' defineVar syntaxCommaOrSemicol
     {343, 2}, // 39: globalVars ->  defineVar syntaxCommaOrSemicol
     {344, 4}, // 40: localVars (',') ->  localVars ',' defineVar syntaxCommaOrSemicol
     {344, 2}, // 41: localVars ->  defineVar syntaxCommaOrSemicol
     {345, 1}, // 42: exprUnit_ ->  string
     {345, 1}, // 43: exprUnit_ (NUMBER) ->  NUMBER
     {345, 1}, // 44: exprUnit_ ->  identifier
     {346, 2}, // 45: exprStart_ ->  exprUnit_ syntaxExpression
     {347, 1}, // 46: expression ->  exprStart_
     {347, 3}, // 47: expression ('[') ->  '[' argsOpt ']'
     {347, 4}, // 48: expression ('[') ->  expression '[' expression ']'
     {347, 4}, // 49: expression ('(') ->  identifier '(' argsOpt ')'
     {347, 3}, // 50: expression ('`') ->  '`' expression '`'
     {347, 3}, // 51: expression ('(') ->  '(' expression ')'
     {347, 2}, // 52: expression ('!') ->  '+' expression
     {347, 2}, // 53: expression ('!') ->  '-' expression
     {347, 2}, // 54: expression ('!') ->  '~' expression
     {347, 2}, // 55: expression ('!') ->  '!' expression
     {347, 3}, // 56: expression (INCDEC) ->  INCDEC opValue expression
     {347, 3}, // 57: expression (INCDEC) ->  expression INCDEC opValue
     {347, 4}, // 58: expression ('!') ->  '(' cast ')' expression
     {347, 3}, // 59: expression ('+') ->  expression '+' expression
     {347, 3}, // 60: expression ('-') ->  expression '-' expression
     {347, 4}, // 61: expression (MULTIPLY) ->  expression MULTIPLY opValue expression
     {347, 4}, // 62: expression (SHIFT) ->  expression SHIFT opValue expression
     {347, 4}, // 63: expression (ORDER) ->  expression ORDER opValue expression
     {347, 4}, // 64: expression (EQUALITY) ->  expression EQUALITY opValue expression
     {347, 3}, // 65: expression ('&') ->  expression '&' expression
     {347, 3}, // 66: expression ('^') ->  expression '^' expression
     {347, 3}, // 67: expression ('|') ->  expression '|' expression
     {347, 3}, // 68: expression (AND) ->  expression AND expression
     {347, 3}, // 69: expression (OR) ->  expression OR expression
     {347, 5}, // 70: expression ('?') ->  expression '?' expression ':' expression
     {347, 3}, // 71: expression ('=') ->  expression '=' expression
     {347, 4}, // 72: expression (MATH_IS) ->  expression MATH_IS opValue expression
     {348, 2}, // 73: conditionVar_ ->  varType defineVar
     {349, 1}, // 74: condition ->  expression
     {349, 1}, // 75: condition ->  conditionVar_
     {350, 1}, // 76: optCondition ->  condition
     {350, 0}, // 77: optCondition ->  <empty>
     {351, 1}, // 78: retExpr_ ->  expression
     {351, 0}, // 79: retExpr_ ->  <empty>
     {352, 1}, // 80: retLeave_ (RETURN) ->  RETURN
     {352, 1}, // 81: retLeave_ (EXIT) ->  EXIT
     {353, 3}, // 82: returnStatement ->  retLeave_ syntaxExpression retExpr_
     {354, 1}, // 83: while_ (WHILE) ->  WHILE
     {355, 7}, // 84: whileStatement ('(') ->  while_ '(' syntaxExpression condition syntaxCloseParen closeParenBreakOK statement
     {356, 3}, // 85: flowArgs (',') ->  flowArgs ',' expression
     {356, 1}, // 86: flowArgs ->  expression
     {357, 3}, // 87: flowInitDefs_ (',') ->  flowInitDefs_ ',' defineVar
     {357, 1}, // 88: flowInitDefs_ ->  defineVar
     {358, 1}, // 89: flowInit ->  flowArgs
     {358, 2}, // 90: flowInit ->  varType flowInitDefs_
     {359, 1}, // 91: optInit ->  flowInit
     {359, 1}, // 92: optInit ->  argsNull
     {360, 1}, // 93: for_ (FOR) ->  FOR
     {361, 1}, // 94: forOptInc_ ->  flowArgs
     {361, 1}, // 95: forOptInc_ ->  argsNull
     {362, 15}, // 96: forStatement ('(') ->  for_ '(' syntaxInit optInit syntaxSemicol ';' syntaxExpression optCondition syntaxSemicol ';' syntaxExpression forOptInc_ syntaxCloseParen closeParenBreakOK statement
     {363, 1}, // 97: if_ (IF) ->  IF
     {364, 1}, // 98: ifElse_ (ELSE) ->  ELSE
     {365, 2}, // 99: ifStatementElse_ ->  ifElse_ statement
     {365, 0}, // 100: ifStatementElse_ ->  <empty>
     {366, 1}, // 101: ifCond_ ->  condition
     {366, 2}, // 102: ifCond_ (';') ->  ';' condition
     {366, 3}, // 103: ifCond_ (';') ->  flowInit ';' condition
     {367, 9}, // 104: ifStatement ('(') ->  if_ '(' syntaxExpression ifCond_ syntaxCloseParen ')' syntaxExpression statement ifStatementElse_
     {368, 1}, // 105: stBreak_ (BREAK) ->  BREAK
     {369, 1}, // 106: stContinue_ (CONTINUE) ->  CONTINUE
     {370, 3}, // 107: stCompound_ ->  openCurly statements closeCurly
     {371, 2}, // 108: stAlt_ (';') ->  stBreak_ ';'
     {371, 2}, // 109: stAlt_ (';') ->  stContinue_ ';'
     {371, 1}, // 110: stAlt_ ->  stCompound_
     {371, 1}, // 111: stAlt_ (';') ->  ';'
     {371, 2}, // 112: stAlt_ (';') ->  expression ';'
     {371, 2}, // 113: stAlt_ (';') ->  returnStatement ';'
     {371, 1}, // 114: stAlt_ ->  whileStatement
     {371, 1}, // 115: stAlt_ ->  ifStatement
     {371, 1}, // 116: stAlt_ ->  forStatement
     {371, 2}, // 117: stAlt_ (errTok_) ->  errTok_ ';'
     {372, 1}, // 118: statement ->  stAlt_
     {372, 3}, // 119: statement (';') ->  varType localVars ';'
     {373, 2}, // 120: statements ->  statements statement
     {373, 0}, // 121: statements ->  <empty>
     {374, 1}, // 122: fdName_ ->  identifier
     {375, 1}, // 123: fdParamName_ ->  identifier
     {376, 3}, // 124: fdParam_ ->  varType fdParamName_ syntaxCommaOrCloseparen
     {377, 4}, // 125: fdParams_ (',') ->  fdParams_ ',' syntaxTypename fdParam_
     {377, 1}, // 126: fdParams_ ->  fdParam_
     {378, 1}, // 127: fdOptParams_ ->  fdParams_
     {378, 0}, // 128: fdOptParams_ ->  <empty>
     {379, 5}, // 129: fdHead_ ('(') ->  fdName_ '(' fdOptParams_ ')' syntaxOpenCurly
     {380, 4}, // 130: functionDef ->  fdHead_ openCurly statements closeCurly
     {381, 1}, // 131: _voidtype (VOID) ->  VOID
     {382, 3}, // 132: _definition (';') ->  varType globalVars ';'
     {382, 2}, // 133: _definition ->  varType functionDef
     {382, 2}, // 134: _definition ->  _voidtype functionDef
     {317, 2}, // 135: defVarOrFun ->  _definition syntaxTypename
     {383, 1}, // 136: input_$ ->  input
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { REQ_TOKEN}, { 11} },               
    { {       316}, {  1} }, // input      
    { {       317}, {  2} }, // defVarOrFun
    { {       382}, {  3} }, // _definition
    { {       332}, {  4} }, // varType    
    { {       381}, {  5} }, // _voidtype  
    { {       331}, {  6} }, // varType_   
    { {       306}, {  7} }, // VOID       
    { {       300}, {  8} }, // INT        
    { {       305}, {  9} }, // STRINGTYPE 
    { {       301}, { 10} }, // LIST       
    { {         0}, {  0} },               
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {      11} },               
    { {       317}, {      11} }, // defVarOrFun
    { {       382}, {       3} }, // _definition
    { {       332}, {       4} }, // varType    
    { {       381}, {       5} }, // _voidtype  
    { {       331}, {       6} }, // varType_   
    { {       306}, {       7} }, // VOID       
    { {       300}, {       8} }, // INT        
    { {       305}, {       9} }, // STRINGTYPE 
    { {       301}, {      10} }, // LIST       
    { {      EOF_}, { ACCEPT_} },               
    { {         0}, {       0} },               
};

SR_ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_3[] =
{
    { { DEF_RED}, {   2} },                  
    { {     326}, {  12} }, // syntaxTypename
    { {       0}, { -11} },                  
};

SR_ s_4[] =
{
    { { REQ_TOKEN}, {  9} },               
    { {       343}, { 13} }, // globalVars 
    { {       380}, { 14} }, // functionDef
    { {       342}, { 15} }, // defineVar  
    { {       379}, { 16} }, // fdHead_    
    { {       341}, { 17} }, // defineVar_ 
    { {       374}, { 18} }, // fdName_    
    { {       336}, { 19} }, // identifier 
    { {       298}, { 20} }, // IDENTIFIER 
    { {         0}, {  0} },               
};

SR_ s_5[] =
{
    { { REQ_TOKEN}, {  6} },               
    { {       380}, { 21} }, // functionDef
    { {       379}, { 16} }, // fdHead_    
    { {       374}, { 18} }, // fdName_    
    { {       336}, { 22} }, // identifier 
    { {       298}, { 20} }, // IDENTIFIER 
    { {         0}, {  0} },               
};

SR_ s_6[] =
{
    { { DEF_RED}, {  2} },                    
    { {     322}, { 23} }, // syntaxIdentifier
    { {       0}, { -7} },                    
};

SR_ s_7[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR_ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -135} }, 
};

SR_ s_13[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 24} }, // ';'
    { {        44}, { 25} }, // ','
    { {         0}, {  0} },       
};

SR_ s_14[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR_ s_15[] =
{
    { { DEF_RED}, {  2} },                        
    { {     319}, { 26} }, // syntaxCommaOrSemicol
    { {       0}, { -4} },                        
};

SR_ s_16[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       328}, { 27} }, // openCurly
    { {       123}, { 28} }, // '{'      
    { {         0}, {  0} },             
};

SR_ s_17[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  29} }, // '='
    { {       0}, { -36} },       
};

SR_ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR_ s_19[] =
{
    { { REQ_DEF}, {    2} },       
    { {      40}, { -122} }, // '('
    { {       0}, {  -35} },       
};

SR_ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_21[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR_ s_22[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR_ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_24[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       342}, { 31} }, // defineVar 
    { {       341}, { 17} }, // defineVar_
    { {       336}, { 32} }, // identifier
    { {       298}, { 20} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_27[] =
{
    { { DEF_RED}, {    2} },              
    { {     373}, {   33} }, // statements
    { {       0}, { -121} },              
};

SR_ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_29[] =
{
    { { DEF_RED}, {  2} },                    
    { {     321}, { 34} }, // syntaxExpression
    { {       0}, { -6} },                    
};

SR_ s_30[] =
{
    { { REQ_DEF}, {    9} },                
    { {     378}, {   35} }, // fdOptParams_
    { {     377}, {   36} }, // fdParams_   
    { {     376}, {   37} }, // fdParam_    
    { {     332}, {   38} }, // varType     
    { {     331}, {    6} }, // varType_    
    { {     300}, {    8} }, // INT         
    { {     305}, {    9} }, // STRINGTYPE  
    { {     301}, {   10} }, // LIST        
    { {       0}, { -128} },                
};

SR_ s_31[] =
{
    { { DEF_RED}, {  2} },                        
    { {     319}, { 39} }, // syntaxCommaOrSemicol
    { {       0}, { -4} },                        
};

SR_ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_33[] =
{
    { { ERR_REQ}, { 49} },                   
    { {     329}, { 40} }, // closeCurly     
    { {     372}, { 41} }, // statement      
    { {     125}, { 42} }, // '}'            
    { {     371}, { 43} }, // stAlt_         
    { {     332}, { 44} }, // varType        
    { {     368}, { 45} }, // stBreak_       
    { {     369}, { 46} }, // stContinue_    
    { {     370}, { 47} }, // stCompound_    
    { {      59}, { 48} }, // ';'            
    { {     347}, { 49} }, // expression     
    { {     353}, { 50} }, // returnStatement
    { {     355}, { 51} }, // whileStatement 
    { {     367}, { 52} }, // ifStatement    
    { {     362}, { 53} }, // forStatement   
    { { errTok_}, { 54} }, // errTok_        
    { {     331}, {  6} }, // varType_       
    { {     293}, { 55} }, // BREAK          
    { {     294}, { 56} }, // CONTINUE       
    { {     328}, { 57} }, // openCurly      
    { {     346}, { 58} }, // exprStart_     
    { {      91}, { 59} }, // '['            
    { {     336}, { 60} }, // identifier     
    { {      96}, { 61} }, // '`'            
    { {      40}, { 62} }, // '('            
    { {      43}, { 63} }, // '+'            
    { {      45}, { 64} }, // '-'            
    { {     126}, { 65} }, // '~'            
    { {      33}, { 66} }, // '!'            
    { {     315}, { 67} }, // INCDEC         
    { {     352}, { 68} }, // retLeave_      
    { {     354}, { 69} }, // while_         
    { {     363}, { 70} }, // if_            
    { {     360}, { 71} }, // for_           
    { {     300}, {  8} }, // INT            
    { {     305}, {  9} }, // STRINGTYPE     
    { {     301}, { 10} }, // LIST           
    { {     123}, { 28} }, // '{'            
    { {     345}, { 72} }, // exprUnit_      
    { {     298}, { 20} }, // IDENTIFIER     
    { {     303}, { 73} }, // RETURN         
    { {     296}, { 74} }, // EXIT           
    { {     307}, { 75} }, // WHILE          
    { {     299}, { 76} }, // IF             
    { {     297}, { 77} }, // FOR            
    { {     334}, { 78} }, // string         
    { {     302}, { 79} }, // NUMBER         
    { {     333}, { 80} }, // string_        
    { {     304}, { 81} }, // STRING         
    { {       0}, {  0} },                   
};

SR_ s_34[] =
{
    { { REQ_TOKEN}, { 18} },              
    { {       347}, { 82} }, // expression
    { {       346}, { 58} }, // exprStart_
    { {        91}, { 59} }, // '['       
    { {       336}, { 60} }, // identifier
    { {        96}, { 61} }, // '`'       
    { {        40}, { 62} }, // '('       
    { {        43}, { 63} }, // '+'       
    { {        45}, { 64} }, // '-'       
    { {       126}, { 65} }, // '~'       
    { {        33}, { 66} }, // '!'       
    { {       315}, { 67} }, // INCDEC    
    { {       345}, { 72} }, // exprUnit_ 
    { {       298}, { 20} }, // IDENTIFIER
    { {       334}, { 78} }, // string    
    { {       302}, { 79} }, // NUMBER    
    { {       333}, { 80} }, // string_   
    { {       304}, { 81} }, // STRING    
    { {         0}, {  0} },              
};

SR_ s_35[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 83} }, // ')'
    { {         0}, {  0} },       
};

SR_ s_36[] =
{
    { { REQ_DEF}, {    2} },       
    { {      44}, {   84} }, // ','
    { {       0}, { -127} },       
};

SR_ s_37[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -126} }, 
};

SR_ s_38[] =
{
    { { REQ_TOKEN}, {  4} },                
    { {       375}, { 85} }, // fdParamName_
    { {       336}, { 86} }, // identifier  
    { {       298}, { 20} }, // IDENTIFIER  
    { {         0}, {  0} },                
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_40[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR_ s_41[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR_ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_43[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR_ s_44[] =
{
    { { REQ_TOKEN}, {  6} },              
    { {       344}, { 87} }, // localVars 
    { {       342}, { 88} }, // defineVar 
    { {       341}, { 17} }, // defineVar_
    { {       336}, { 32} }, // identifier
    { {       298}, { 20} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR_ s_45[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 89} }, // ';'
    { {         0}, {  0} },       
};

SR_ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 90} }, // ';'
    { {         0}, {  0} },       
};

SR_ s_47[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR_ s_48[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR_ s_49[] =
{
    { { REQ_TOKEN}, {  18} },            
    { {        59}, {  91} }, // ';'     
    { {        91}, {  92} }, // '['     
    { {       315}, {  93} }, // INCDEC  
    { {        43}, {  94} }, // '+'     
    { {        45}, {  95} }, // '-'     
    { {       314}, {  96} }, // MULTIPLY
    { {       313}, {  97} }, // SHIFT   
    { {       312}, {  98} }, // ORDER   
    { {       311}, {  99} }, // EQUALITY
    { {        38}, { 100} }, // '&'     
    { {        94}, { 101} }, // '^'     
    { {       124}, { 102} }, // '|'     
    { {       310}, { 103} }, // AND     
    { {       309}, { 104} }, // OR      
    { {        63}, { 105} }, // '?'     
    { {        61}, { 106} }, // '='     
    { {       308}, { 107} }, // MATH_IS 
    { {         0}, {   0} },            
};

SR_ s_50[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 108} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_51[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR_ s_52[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR_ s_53[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR_ s_54[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 109} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_55[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR_ s_56[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR_ s_57[] =
{
    { { DEF_RED}, {    2} },              
    { {     373}, {  110} }, // statements
    { {       0}, { -121} },              
};

SR_ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR_ s_59[] =
{
    { { REQ_DEF}, {  23} },              
    { {     340}, { 111} }, // argsOpt   
    { {     338}, { 112} }, // args      
    { {     339}, { 113} }, // argsNull  
    { {     337}, { 114} }, // argsExpr  
    { {     347}, { 115} }, // expression
    { {     312}, { 116} }, // ORDER     
    { {     346}, {  58} }, // exprStart_
    { {      91}, {  59} }, // '['       
    { {     336}, {  60} }, // identifier
    { {      96}, {  61} }, // '`'       
    { {      40}, {  62} }, // '('       
    { {      43}, {  63} }, // '+'       
    { {      45}, {  64} }, // '-'       
    { {     126}, {  65} }, // '~'       
    { {      33}, {  66} }, // '!'       
    { {     315}, {  67} }, // INCDEC    
    { {     345}, {  72} }, // exprUnit_ 
    { {     298}, {  20} }, // IDENTIFIER
    { {     334}, {  78} }, // string    
    { {     302}, {  79} }, // NUMBER    
    { {     333}, {  80} }, // string_   
    { {     304}, {  81} }, // STRING    
    { {       0}, { -32} },              
};

SR_ s_60[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, { 117} }, // '('
    { {       0}, { -44} },       
};

SR_ s_61[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 118} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {  23} },              
    { {       347}, { 119} }, // expression
    { {       335}, { 120} }, // cast      
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       300}, { 121} }, // INT       
    { {       301}, { 122} }, // LIST      
    { {       305}, { 123} }, // STRINGTYPE
    { {       292}, { 124} }, // BOOL      
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_63[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 125} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_64[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 126} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 127} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_66[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 128} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_67[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 129} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_68[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 130} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_69[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 131} }, // '('
    { {         0}, {   0} },       
};

SR_ s_70[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 132} }, // '('
    { {         0}, {   0} },       
};

SR_ s_71[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 133} }, // '('
    { {         0}, {   0} },       
};

SR_ s_72[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 134} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR_ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR_ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR_ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR_ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_79[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_80[] =
{
    { { REQ_DEF}, {   2} },          
    { {     304}, { 135} }, // STRING
    { {       0}, { -22} },          
};

SR_ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR_ s_82[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -37} },            
};

SR_ s_83[] =
{
    { { DEF_RED}, {   2} },                   
    { {     324}, { 136} }, // syntaxOpenCurly
    { {       0}, {  -9} },                   
};

SR_ s_84[] =
{
    { { DEF_RED}, {   2} },                  
    { {     326}, { 137} }, // syntaxTypename
    { {       0}, { -11} },                  
};

SR_ s_85[] =
{
    { { DEF_RED}, {   2} },                           
    { {     320}, { 138} }, // syntaxCommaOrCloseparen
    { {       0}, {  -5} },                           
};

SR_ s_86[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR_ s_87[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        59}, { 139} }, // ';'
    { {        44}, { 140} }, // ','
    { {         0}, {   0} },       
};

SR_ s_88[] =
{
    { { DEF_RED}, {   2} },                        
    { {     319}, { 141} }, // syntaxCommaOrSemicol
    { {       0}, {  -4} },                        
};

SR_ s_89[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR_ s_90[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR_ s_91[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR_ s_92[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 142} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_93[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 143} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_94[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 144} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_95[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 145} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_96[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 146} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_97[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 147} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_98[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 148} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_99[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 149} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 150} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_101[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 151} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_102[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 152} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_103[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 153} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_104[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 154} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_105[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 155} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_106[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 156} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_107[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 157} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_108[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR_ s_109[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR_ s_110[] =
{
    { { ERR_REQ}, {  49} },                   
    { {     329}, { 158} }, // closeCurly     
    { {     372}, {  41} }, // statement      
    { {     125}, {  42} }, // '}'            
    { {     371}, {  43} }, // stAlt_         
    { {     332}, {  44} }, // varType        
    { {     368}, {  45} }, // stBreak_       
    { {     369}, {  46} }, // stContinue_    
    { {     370}, {  47} }, // stCompound_    
    { {      59}, {  48} }, // ';'            
    { {     347}, {  49} }, // expression     
    { {     353}, {  50} }, // returnStatement
    { {     355}, {  51} }, // whileStatement 
    { {     367}, {  52} }, // ifStatement    
    { {     362}, {  53} }, // forStatement   
    { { errTok_}, {  54} }, // errTok_        
    { {     331}, {   6} }, // varType_       
    { {     293}, {  55} }, // BREAK          
    { {     294}, {  56} }, // CONTINUE       
    { {     328}, {  57} }, // openCurly      
    { {     346}, {  58} }, // exprStart_     
    { {      91}, {  59} }, // '['            
    { {     336}, {  60} }, // identifier     
    { {      96}, {  61} }, // '`'            
    { {      40}, {  62} }, // '('            
    { {      43}, {  63} }, // '+'            
    { {      45}, {  64} }, // '-'            
    { {     126}, {  65} }, // '~'            
    { {      33}, {  66} }, // '!'            
    { {     315}, {  67} }, // INCDEC         
    { {     352}, {  68} }, // retLeave_      
    { {     354}, {  69} }, // while_         
    { {     363}, {  70} }, // if_            
    { {     360}, {  71} }, // for_           
    { {     300}, {   8} }, // INT            
    { {     305}, {   9} }, // STRINGTYPE     
    { {     301}, {  10} }, // LIST           
    { {     123}, {  28} }, // '{'            
    { {     345}, {  72} }, // exprUnit_      
    { {     298}, {  20} }, // IDENTIFIER     
    { {     303}, {  73} }, // RETURN         
    { {     296}, {  74} }, // EXIT           
    { {     307}, {  75} }, // WHILE          
    { {     299}, {  76} }, // IF             
    { {     297}, {  77} }, // FOR            
    { {     334}, {  78} }, // string         
    { {     302}, {  79} }, // NUMBER         
    { {     333}, {  80} }, // string_        
    { {     304}, {  81} }, // STRING         
    { {       0}, {   0} },                   
};

SR_ s_111[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        93}, { 159} }, // ']'
    { {         0}, {   0} },       
};

SR_ s_112[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 160} }, // ','
    { {       0}, { -33} },       
};

SR_ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_115[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -28} },            
};

SR_ s_116[] =
{
    { { DEF_RED}, {   2} },           
    { {     327}, { 161} }, // opValue
    { {       0}, { -12} },           
};

SR_ s_117[] =
{
    { { REQ_DEF}, {  23} },              
    { {     340}, { 162} }, // argsOpt   
    { {     338}, { 112} }, // args      
    { {     339}, { 113} }, // argsNull  
    { {     337}, { 114} }, // argsExpr  
    { {     347}, { 115} }, // expression
    { {     312}, { 116} }, // ORDER     
    { {     346}, {  58} }, // exprStart_
    { {      91}, {  59} }, // '['       
    { {     336}, {  60} }, // identifier
    { {      96}, {  61} }, // '`'       
    { {      40}, {  62} }, // '('       
    { {      43}, {  63} }, // '+'       
    { {      45}, {  64} }, // '-'       
    { {     126}, {  65} }, // '~'       
    { {      33}, {  66} }, // '!'       
    { {     315}, {  67} }, // INCDEC    
    { {     345}, {  72} }, // exprUnit_ 
    { {     298}, {  20} }, // IDENTIFIER
    { {     334}, {  78} }, // string    
    { {     302}, {  79} }, // NUMBER    
    { {     333}, {  80} }, // string_   
    { {     304}, {  81} }, // STRING    
    { {       0}, { -32} },              
};

SR_ s_118[] =
{
    { { REQ_TOKEN}, {  18} },            
    { {        96}, { 163} }, // '`'     
    { {        91}, {  92} }, // '['     
    { {       315}, {  93} }, // INCDEC  
    { {        43}, {  94} }, // '+'     
    { {        45}, {  95} }, // '-'     
    { {       314}, {  96} }, // MULTIPLY
    { {       313}, {  97} }, // SHIFT   
    { {       312}, {  98} }, // ORDER   
    { {       311}, {  99} }, // EQUALITY
    { {        38}, { 100} }, // '&'     
    { {        94}, { 101} }, // '^'     
    { {       124}, { 102} }, // '|'     
    { {       310}, { 103} }, // AND     
    { {       309}, { 104} }, // OR      
    { {        63}, { 105} }, // '?'     
    { {        61}, { 106} }, // '='     
    { {       308}, { 107} }, // MATH_IS 
    { {         0}, {   0} },            
};

SR_ s_119[] =
{
    { { REQ_TOKEN}, {  18} },            
    { {        41}, { 164} }, // ')'     
    { {        91}, {  92} }, // '['     
    { {       315}, {  93} }, // INCDEC  
    { {        43}, {  94} }, // '+'     
    { {        45}, {  95} }, // '-'     
    { {       314}, {  96} }, // MULTIPLY
    { {       313}, {  97} }, // SHIFT   
    { {       312}, {  98} }, // ORDER   
    { {       311}, {  99} }, // EQUALITY
    { {        38}, { 100} }, // '&'     
    { {        94}, { 101} }, // '^'     
    { {       124}, { 102} }, // '|'     
    { {       310}, { 103} }, // AND     
    { {       309}, { 104} }, // OR      
    { {        63}, { 105} }, // '?'     
    { {        61}, { 106} }, // '='     
    { {       308}, { 107} }, // MATH_IS 
    { {         0}, {   0} },            
};

SR_ s_120[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 165} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_124[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_125[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -52} },          
};

SR_ s_126[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -53} },          
};

SR_ s_127[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -54} },          
};

SR_ s_128[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -55} },          
};

SR_ s_129[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 166} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_130[] =
{
    { { REQ_DEF}, {  19} },              
    { {     351}, { 167} }, // retExpr_  
    { {     347}, { 168} }, // expression
    { {     346}, {  58} }, // exprStart_
    { {      91}, {  59} }, // '['       
    { {     336}, {  60} }, // identifier
    { {      96}, {  61} }, // '`'       
    { {      40}, {  62} }, // '('       
    { {      43}, {  63} }, // '+'       
    { {      45}, {  64} }, // '-'       
    { {     126}, {  65} }, // '~'       
    { {      33}, {  66} }, // '!'       
    { {     315}, {  67} }, // INCDEC    
    { {     345}, {  72} }, // exprUnit_ 
    { {     298}, {  20} }, // IDENTIFIER
    { {     334}, {  78} }, // string    
    { {     302}, {  79} }, // NUMBER    
    { {     333}, {  80} }, // string_   
    { {     304}, {  81} }, // STRING    
    { {       0}, { -79} },              
};

SR_ s_131[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 169} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_132[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 170} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_133[] =
{
    { { DEF_RED}, {   2} },              
    { {     323}, { 171} }, // syntaxInit
    { {       0}, {  -8} },              
};

SR_ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR_ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_136[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR_ s_137[] =
{
    { { REQ_TOKEN}, {   7} },              
    { {       376}, { 172} }, // fdParam_  
    { {       332}, {  38} }, // varType   
    { {       331}, {   6} }, // varType_  
    { {       300}, {   8} }, // INT       
    { {       305}, {   9} }, // STRINGTYPE
    { {       301}, {  10} }, // LIST      
    { {         0}, {   0} },              
};

SR_ s_138[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR_ s_139[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR_ s_140[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       342}, { 173} }, // defineVar 
    { {       341}, {  17} }, // defineVar_
    { {       336}, {  32} }, // identifier
    { {       298}, {  20} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR_ s_142[] =
{
    { { REQ_TOKEN}, {  18} },            
    { {        93}, { 174} }, // ']'     
    { {        91}, {  92} }, // '['     
    { {       315}, {  93} }, // INCDEC  
    { {        43}, {  94} }, // '+'     
    { {        45}, {  95} }, // '-'     
    { {       314}, {  96} }, // MULTIPLY
    { {       313}, {  97} }, // SHIFT   
    { {       312}, {  98} }, // ORDER   
    { {       311}, {  99} }, // EQUALITY
    { {        38}, { 100} }, // '&'     
    { {        94}, { 101} }, // '^'     
    { {       124}, { 102} }, // '|'     
    { {       310}, { 103} }, // AND     
    { {       309}, { 104} }, // OR      
    { {        63}, { 105} }, // '?'     
    { {        61}, { 106} }, // '='     
    { {       308}, { 107} }, // MATH_IS 
    { {         0}, {   0} },            
};

SR_ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR_ s_144[] =
{
    { { REQ_DEF}, {   4} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {     314}, {  96} }, // MULTIPLY
    { {       0}, { -59} },            
};

SR_ s_145[] =
{
    { { REQ_DEF}, {   4} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {     314}, {  96} }, // MULTIPLY
    { {       0}, { -60} },            
};

SR_ s_146[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 175} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_147[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 176} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_148[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 177} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_149[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 178} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_150[] =
{
    { { REQ_DEF}, {   9} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {       0}, { -65} },            
};

SR_ s_151[] =
{
    { { REQ_DEF}, {  10} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {       0}, { -66} },            
};

SR_ s_152[] =
{
    { { REQ_DEF}, {  11} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {       0}, { -67} },            
};

SR_ s_153[] =
{
    { { REQ_DEF}, {  12} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {       0}, { -68} },            
};

SR_ s_154[] =
{
    { { REQ_DEF}, {  13} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {       0}, { -69} },            
};

SR_ s_155[] =
{
    { { REQ_TOKEN}, {  18} },            
    { {        58}, { 179} }, // ':'     
    { {        91}, {  92} }, // '['     
    { {       315}, {  93} }, // INCDEC  
    { {        43}, {  94} }, // '+'     
    { {        45}, {  95} }, // '-'     
    { {       314}, {  96} }, // MULTIPLY
    { {       313}, {  97} }, // SHIFT   
    { {       312}, {  98} }, // ORDER   
    { {       311}, {  99} }, // EQUALITY
    { {        38}, { 100} }, // '&'     
    { {        94}, { 101} }, // '^'     
    { {       124}, { 102} }, // '|'     
    { {       310}, { 103} }, // AND     
    { {       309}, { 104} }, // OR      
    { {        63}, { 105} }, // '?'     
    { {        61}, { 106} }, // '='     
    { {       308}, { 107} }, // MATH_IS 
    { {         0}, {   0} },            
};

SR_ s_156[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -71} },            
};

SR_ s_157[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 180} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_158[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR_ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR_ s_160[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       337}, { 181} }, // argsExpr  
    { {       347}, { 115} }, // expression
    { {       312}, { 116} }, // ORDER     
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_161[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_162[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 182} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_165[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 183} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_166[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -56} },          
};

SR_ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR_ s_168[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -78} },            
};

SR_ s_169[] =
{
    { { REQ_TOKEN}, {  25} },                 
    { {       349}, { 184} }, // condition    
    { {       347}, { 185} }, // expression   
    { {       348}, { 186} }, // conditionVar_
    { {       346}, {  58} }, // exprStart_   
    { {        91}, {  59} }, // '['          
    { {       336}, {  60} }, // identifier   
    { {        96}, {  61} }, // '`'          
    { {        40}, {  62} }, // '('          
    { {        43}, {  63} }, // '+'          
    { {        45}, {  64} }, // '-'          
    { {       126}, {  65} }, // '~'          
    { {        33}, {  66} }, // '!'          
    { {       315}, {  67} }, // INCDEC       
    { {       332}, { 187} }, // varType      
    { {       345}, {  72} }, // exprUnit_    
    { {       298}, {  20} }, // IDENTIFIER   
    { {       331}, {   6} }, // varType_     
    { {       334}, {  78} }, // string       
    { {       302}, {  79} }, // NUMBER       
    { {       300}, {   8} }, // INT          
    { {       305}, {   9} }, // STRINGTYPE   
    { {       301}, {  10} }, // LIST         
    { {       333}, {  80} }, // string_      
    { {       304}, {  81} }, // STRING       
    { {         0}, {   0} },                 
};

SR_ s_170[] =
{
    { { REQ_TOKEN}, {  29} },                 
    { {       366}, { 188} }, // ifCond_      
    { {       349}, { 189} }, // condition    
    { {        59}, { 190} }, // ';'          
    { {       358}, { 191} }, // flowInit     
    { {       347}, { 192} }, // expression   
    { {       348}, { 186} }, // conditionVar_
    { {       356}, { 193} }, // flowArgs     
    { {       332}, { 194} }, // varType      
    { {       346}, {  58} }, // exprStart_   
    { {        91}, {  59} }, // '['          
    { {       336}, {  60} }, // identifier   
    { {        96}, {  61} }, // '`'          
    { {        40}, {  62} }, // '('          
    { {        43}, {  63} }, // '+'          
    { {        45}, {  64} }, // '-'          
    { {       126}, {  65} }, // '~'          
    { {        33}, {  66} }, // '!'          
    { {       315}, {  67} }, // INCDEC       
    { {       331}, {   6} }, // varType_     
    { {       345}, {  72} }, // exprUnit_    
    { {       298}, {  20} }, // IDENTIFIER   
    { {       300}, {   8} }, // INT          
    { {       305}, {   9} }, // STRINGTYPE   
    { {       301}, {  10} }, // LIST         
    { {       334}, {  78} }, // string       
    { {       302}, {  79} }, // NUMBER       
    { {       333}, {  80} }, // string_      
    { {       304}, {  81} }, // STRING       
    { {         0}, {   0} },                 
};

SR_ s_171[] =
{
    { { REQ_DEF}, {  27} },              
    { {     359}, { 195} }, // optInit   
    { {     358}, { 196} }, // flowInit  
    { {     339}, { 197} }, // argsNull  
    { {     356}, { 193} }, // flowArgs  
    { {     332}, { 198} }, // varType   
    { {     347}, { 199} }, // expression
    { {     331}, {   6} }, // varType_  
    { {     346}, {  58} }, // exprStart_
    { {      91}, {  59} }, // '['       
    { {     336}, {  60} }, // identifier
    { {      96}, {  61} }, // '`'       
    { {      40}, {  62} }, // '('       
    { {      43}, {  63} }, // '+'       
    { {      45}, {  64} }, // '-'       
    { {     126}, {  65} }, // '~'       
    { {      33}, {  66} }, // '!'       
    { {     315}, {  67} }, // INCDEC    
    { {     300}, {   8} }, // INT       
    { {     305}, {   9} }, // STRINGTYPE
    { {     301}, {  10} }, // LIST      
    { {     345}, {  72} }, // exprUnit_ 
    { {     298}, {  20} }, // IDENTIFIER
    { {     334}, {  78} }, // string    
    { {     302}, {  79} }, // NUMBER    
    { {     333}, {  80} }, // string_   
    { {     304}, {  81} }, // STRING    
    { {       0}, { -32} },              
};

SR_ s_172[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR_ s_173[] =
{
    { { DEF_RED}, {   2} },                        
    { {     319}, { 200} }, // syntaxCommaOrSemicol
    { {       0}, {  -4} },                        
};

SR_ s_174[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR_ s_175[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -61} },          
};

SR_ s_176[] =
{
    { { REQ_DEF}, {   6} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {       0}, { -62} },            
};

SR_ s_177[] =
{
    { { REQ_DEF}, {   7} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {       0}, { -63} },            
};

SR_ s_178[] =
{
    { { REQ_DEF}, {   8} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {       0}, { -64} },            
};

SR_ s_179[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 201} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_180[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -72} },            
};

SR_ s_181[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_182[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_183[] =
{
    { { REQ_DEF}, {   3} },          
    { {      91}, {  92} }, // '['   
    { {     315}, {  93} }, // INCDEC
    { {       0}, { -58} },          
};

SR_ s_184[] =
{
    { { DEF_RED}, {   2} },                    
    { {     318}, { 202} }, // syntaxCloseParen
    { {       0}, {  -3} },                    
};

SR_ s_185[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -74} },            
};

SR_ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR_ s_187[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       342}, { 203} }, // defineVar 
    { {       341}, {  17} }, // defineVar_
    { {       336}, {  32} }, // identifier
    { {       298}, {  20} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_188[] =
{
    { { DEF_RED}, {   2} },                    
    { {     318}, { 204} }, // syntaxCloseParen
    { {       0}, {  -3} },                    
};

SR_ s_189[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR_ s_190[] =
{
    { { REQ_TOKEN}, {  25} },                 
    { {       349}, { 205} }, // condition    
    { {       347}, { 185} }, // expression   
    { {       348}, { 186} }, // conditionVar_
    { {       346}, {  58} }, // exprStart_   
    { {        91}, {  59} }, // '['          
    { {       336}, {  60} }, // identifier   
    { {        96}, {  61} }, // '`'          
    { {        40}, {  62} }, // '('          
    { {        43}, {  63} }, // '+'          
    { {        45}, {  64} }, // '-'          
    { {       126}, {  65} }, // '~'          
    { {        33}, {  66} }, // '!'          
    { {       315}, {  67} }, // INCDEC       
    { {       332}, { 187} }, // varType      
    { {       345}, {  72} }, // exprUnit_    
    { {       298}, {  20} }, // IDENTIFIER   
    { {       331}, {   6} }, // varType_     
    { {       334}, {  78} }, // string       
    { {       302}, {  79} }, // NUMBER       
    { {       300}, {   8} }, // INT          
    { {       305}, {   9} }, // STRINGTYPE   
    { {       301}, {  10} }, // LIST         
    { {       333}, {  80} }, // string_      
    { {       304}, {  81} }, // STRING       
    { {         0}, {   0} },                 
};

SR_ s_191[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 206} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_192[] =
{
    { { REQ_DEF}, {  18} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {      41}, { -74} }, // ')'     
    { {       0}, { -86} },            
};

SR_ s_193[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 207} }, // ','
    { {       0}, { -89} },       
};

SR_ s_194[] =
{
    { { REQ_TOKEN}, {   6} },                 
    { {       357}, { 208} }, // flowInitDefs_
    { {       342}, { 209} }, // defineVar    
    { {       341}, {  17} }, // defineVar_   
    { {       336}, {  32} }, // identifier   
    { {       298}, {  20} }, // IDENTIFIER   
    { {         0}, {   0} },                 
};

SR_ s_195[] =
{
    { { DEF_RED}, {   2} },                 
    { {     325}, { 210} }, // syntaxSemicol
    { {       0}, { -10} },                 
};

SR_ s_196[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR_ s_197[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR_ s_198[] =
{
    { { REQ_TOKEN}, {   6} },                 
    { {       357}, { 208} }, // flowInitDefs_
    { {       342}, { 211} }, // defineVar    
    { {       341}, {  17} }, // defineVar_   
    { {       336}, {  32} }, // identifier   
    { {       298}, {  20} }, // IDENTIFIER   
    { {         0}, {   0} },                 
};

SR_ s_199[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -86} },            
};

SR_ s_200[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_201[] =
{
    { { REQ_DEF}, {  15} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {       0}, { -70} },            
};

SR_ s_202[] =
{
    { { REQ_TOKEN}, {   3} },                     
    { {       330}, { 212} }, // closeParenBreakOK
    { {        41}, { 213} }, // ')'              
    { {         0}, {   0} },                     
};

SR_ s_203[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR_ s_204[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 214} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_205[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR_ s_206[] =
{
    { { REQ_TOKEN}, {  25} },                 
    { {       349}, { 215} }, // condition    
    { {       347}, { 185} }, // expression   
    { {       348}, { 186} }, // conditionVar_
    { {       346}, {  58} }, // exprStart_   
    { {        91}, {  59} }, // '['          
    { {       336}, {  60} }, // identifier   
    { {        96}, {  61} }, // '`'          
    { {        40}, {  62} }, // '('          
    { {        43}, {  63} }, // '+'          
    { {        45}, {  64} }, // '-'          
    { {       126}, {  65} }, // '~'          
    { {        33}, {  66} }, // '!'          
    { {       315}, {  67} }, // INCDEC       
    { {       332}, { 187} }, // varType      
    { {       345}, {  72} }, // exprUnit_    
    { {       298}, {  20} }, // IDENTIFIER   
    { {       331}, {   6} }, // varType_     
    { {       334}, {  78} }, // string       
    { {       302}, {  79} }, // NUMBER       
    { {       300}, {   8} }, // INT          
    { {       305}, {   9} }, // STRINGTYPE   
    { {       301}, {  10} }, // LIST         
    { {       333}, {  80} }, // string_      
    { {       304}, {  81} }, // STRING       
    { {         0}, {   0} },                 
};

SR_ s_207[] =
{
    { { REQ_TOKEN}, {  18} },              
    { {       347}, { 216} }, // expression
    { {       346}, {  58} }, // exprStart_
    { {        91}, {  59} }, // '['       
    { {       336}, {  60} }, // identifier
    { {        96}, {  61} }, // '`'       
    { {        40}, {  62} }, // '('       
    { {        43}, {  63} }, // '+'       
    { {        45}, {  64} }, // '-'       
    { {       126}, {  65} }, // '~'       
    { {        33}, {  66} }, // '!'       
    { {       315}, {  67} }, // INCDEC    
    { {       345}, {  72} }, // exprUnit_ 
    { {       298}, {  20} }, // IDENTIFIER
    { {       334}, {  78} }, // string    
    { {       302}, {  79} }, // NUMBER    
    { {       333}, {  80} }, // string_   
    { {       304}, {  81} }, // STRING    
    { {         0}, {   0} },              
};

SR_ s_208[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 217} }, // ','
    { {       0}, { -90} },       
};

SR_ s_209[] =
{
    { { REQ_DEF}, {   2} },       
    { {      41}, { -73} }, // ')'
    { {       0}, { -88} },       
};

SR_ s_210[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 218} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_211[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR_ s_212[] =
{
    { { ERR_REQ}, {  47} },                   
    { {     372}, { 219} }, // statement      
    { {     371}, {  43} }, // stAlt_         
    { {     332}, {  44} }, // varType        
    { {     368}, {  45} }, // stBreak_       
    { {     369}, {  46} }, // stContinue_    
    { {     370}, {  47} }, // stCompound_    
    { {      59}, {  48} }, // ';'            
    { {     347}, {  49} }, // expression     
    { {     353}, {  50} }, // returnStatement
    { {     355}, {  51} }, // whileStatement 
    { {     367}, {  52} }, // ifStatement    
    { {     362}, {  53} }, // forStatement   
    { { errTok_}, {  54} }, // errTok_        
    { {     331}, {   6} }, // varType_       
    { {     293}, {  55} }, // BREAK          
    { {     294}, {  56} }, // CONTINUE       
    { {     328}, {  57} }, // openCurly      
    { {     346}, {  58} }, // exprStart_     
    { {      91}, {  59} }, // '['            
    { {     336}, {  60} }, // identifier     
    { {      96}, {  61} }, // '`'            
    { {      40}, {  62} }, // '('            
    { {      43}, {  63} }, // '+'            
    { {      45}, {  64} }, // '-'            
    { {     126}, {  65} }, // '~'            
    { {      33}, {  66} }, // '!'            
    { {     315}, {  67} }, // INCDEC         
    { {     352}, {  68} }, // retLeave_      
    { {     354}, {  69} }, // while_         
    { {     363}, {  70} }, // if_            
    { {     360}, {  71} }, // for_           
    { {     300}, {   8} }, // INT            
    { {     305}, {   9} }, // STRINGTYPE     
    { {     301}, {  10} }, // LIST           
    { {     123}, {  28} }, // '{'            
    { {     345}, {  72} }, // exprUnit_      
    { {     298}, {  20} }, // IDENTIFIER     
    { {     303}, {  73} }, // RETURN         
    { {     296}, {  74} }, // EXIT           
    { {     307}, {  75} }, // WHILE          
    { {     299}, {  76} }, // IF             
    { {     297}, {  77} }, // FOR            
    { {     334}, {  78} }, // string         
    { {     302}, {  79} }, // NUMBER         
    { {     333}, {  80} }, // string_        
    { {     304}, {  81} }, // STRING         
    { {       0}, {   0} },                   
};

SR_ s_213[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_214[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 220} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_215[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR_ s_216[] =
{
    { { REQ_DEF}, {  17} },            
    { {      91}, {  92} }, // '['     
    { {     315}, {  93} }, // INCDEC  
    { {      43}, {  94} }, // '+'     
    { {      45}, {  95} }, // '-'     
    { {     314}, {  96} }, // MULTIPLY
    { {     313}, {  97} }, // SHIFT   
    { {     312}, {  98} }, // ORDER   
    { {     311}, {  99} }, // EQUALITY
    { {      38}, { 100} }, // '&'     
    { {      94}, { 101} }, // '^'     
    { {     124}, { 102} }, // '|'     
    { {     310}, { 103} }, // AND     
    { {     309}, { 104} }, // OR      
    { {      63}, { 105} }, // '?'     
    { {      61}, { 106} }, // '='     
    { {     308}, { 107} }, // MATH_IS 
    { {       0}, { -85} },            
};

SR_ s_217[] =
{
    { { REQ_TOKEN}, {   5} },              
    { {       342}, { 221} }, // defineVar 
    { {       341}, {  17} }, // defineVar_
    { {       336}, {  32} }, // identifier
    { {       298}, {  20} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_218[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 222} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_219[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR_ s_220[] =
{
    { { ERR_REQ}, {  47} },                   
    { {     372}, { 223} }, // statement      
    { {     371}, {  43} }, // stAlt_         
    { {     332}, {  44} }, // varType        
    { {     368}, {  45} }, // stBreak_       
    { {     369}, {  46} }, // stContinue_    
    { {     370}, {  47} }, // stCompound_    
    { {      59}, {  48} }, // ';'            
    { {     347}, {  49} }, // expression     
    { {     353}, {  50} }, // returnStatement
    { {     355}, {  51} }, // whileStatement 
    { {     367}, {  52} }, // ifStatement    
    { {     362}, {  53} }, // forStatement   
    { { errTok_}, {  54} }, // errTok_        
    { {     331}, {   6} }, // varType_       
    { {     293}, {  55} }, // BREAK          
    { {     294}, {  56} }, // CONTINUE       
    { {     328}, {  57} }, // openCurly      
    { {     346}, {  58} }, // exprStart_     
    { {      91}, {  59} }, // '['            
    { {     336}, {  60} }, // identifier     
    { {      96}, {  61} }, // '`'            
    { {      40}, {  62} }, // '('            
    { {      43}, {  63} }, // '+'            
    { {      45}, {  64} }, // '-'            
    { {     126}, {  65} }, // '~'            
    { {      33}, {  66} }, // '!'            
    { {     315}, {  67} }, // INCDEC         
    { {     352}, {  68} }, // retLeave_      
    { {     354}, {  69} }, // while_         
    { {     363}, {  70} }, // if_            
    { {     360}, {  71} }, // for_           
    { {     300}, {   8} }, // INT            
    { {     305}, {   9} }, // STRINGTYPE     
    { {     301}, {  10} }, // LIST           
    { {     123}, {  28} }, // '{'            
    { {     345}, {  72} }, // exprUnit_      
    { {     298}, {  20} }, // IDENTIFIER     
    { {     303}, {  73} }, // RETURN         
    { {     296}, {  74} }, // EXIT           
    { {     307}, {  75} }, // WHILE          
    { {     299}, {  76} }, // IF             
    { {     297}, {  77} }, // FOR            
    { {     334}, {  78} }, // string         
    { {     302}, {  79} }, // NUMBER         
    { {     333}, {  80} }, // string_        
    { {     304}, {  81} }, // STRING         
    { {       0}, {   0} },                   
};

SR_ s_221[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR_ s_222[] =
{
    { { REQ_DEF}, {  26} },                 
    { {     350}, { 224} }, // optCondition 
    { {     349}, { 225} }, // condition    
    { {     347}, { 185} }, // expression   
    { {     348}, { 186} }, // conditionVar_
    { {     346}, {  58} }, // exprStart_   
    { {      91}, {  59} }, // '['          
    { {     336}, {  60} }, // identifier   
    { {      96}, {  61} }, // '`'          
    { {      40}, {  62} }, // '('          
    { {      43}, {  63} }, // '+'          
    { {      45}, {  64} }, // '-'          
    { {     126}, {  65} }, // '~'          
    { {      33}, {  66} }, // '!'          
    { {     315}, {  67} }, // INCDEC       
    { {     332}, { 187} }, // varType      
    { {     345}, {  72} }, // exprUnit_    
    { {     298}, {  20} }, // IDENTIFIER   
    { {     331}, {   6} }, // varType_     
    { {     334}, {  78} }, // string       
    { {     302}, {  79} }, // NUMBER       
    { {     300}, {   8} }, // INT          
    { {     305}, {   9} }, // STRINGTYPE   
    { {     301}, {  10} }, // LIST         
    { {     333}, {  80} }, // string_      
    { {     304}, {  81} }, // STRING       
    { {       0}, { -77} },                 
};

SR_ s_223[] =
{
    { { REQ_DEF}, {    4} },                    
    { {     365}, {  226} }, // ifStatementElse_
    { {     364}, {  227} }, // ifElse_         
    { {     295}, {  228} }, // ELSE            
    { {       0}, { -100} },                    
};

SR_ s_224[] =
{
    { { DEF_RED}, {   2} },                 
    { {     325}, { 229} }, // syntaxSemicol
    { {       0}, { -10} },                 
};

SR_ s_225[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR_ s_226[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR_ s_227[] =
{
    { { ERR_REQ}, {  47} },                   
    { {     372}, { 230} }, // statement      
    { {     371}, {  43} }, // stAlt_         
    { {     332}, {  44} }, // varType        
    { {     368}, {  45} }, // stBreak_       
    { {     369}, {  46} }, // stContinue_    
    { {     370}, {  47} }, // stCompound_    
    { {      59}, {  48} }, // ';'            
    { {     347}, {  49} }, // expression     
    { {     353}, {  50} }, // returnStatement
    { {     355}, {  51} }, // whileStatement 
    { {     367}, {  52} }, // ifStatement    
    { {     362}, {  53} }, // forStatement   
    { { errTok_}, {  54} }, // errTok_        
    { {     331}, {   6} }, // varType_       
    { {     293}, {  55} }, // BREAK          
    { {     294}, {  56} }, // CONTINUE       
    { {     328}, {  57} }, // openCurly      
    { {     346}, {  58} }, // exprStart_     
    { {      91}, {  59} }, // '['            
    { {     336}, {  60} }, // identifier     
    { {      96}, {  61} }, // '`'            
    { {      40}, {  62} }, // '('            
    { {      43}, {  63} }, // '+'            
    { {      45}, {  64} }, // '-'            
    { {     126}, {  65} }, // '~'            
    { {      33}, {  66} }, // '!'            
    { {     315}, {  67} }, // INCDEC         
    { {     352}, {  68} }, // retLeave_      
    { {     354}, {  69} }, // while_         
    { {     363}, {  70} }, // if_            
    { {     360}, {  71} }, // for_           
    { {     300}, {   8} }, // INT            
    { {     305}, {   9} }, // STRINGTYPE     
    { {     301}, {  10} }, // LIST           
    { {     123}, {  28} }, // '{'            
    { {     345}, {  72} }, // exprUnit_      
    { {     298}, {  20} }, // IDENTIFIER     
    { {     303}, {  73} }, // RETURN         
    { {     296}, {  74} }, // EXIT           
    { {     307}, {  75} }, // WHILE          
    { {     299}, {  76} }, // IF             
    { {     297}, {  77} }, // FOR            
    { {     334}, {  78} }, // string         
    { {     302}, {  79} }, // NUMBER         
    { {     333}, {  80} }, // string_        
    { {     304}, {  81} }, // STRING         
    { {       0}, {   0} },                   
};

SR_ s_228[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR_ s_229[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 231} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_230[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR_ s_231[] =
{
    { { DEF_RED}, {   2} },                    
    { {     321}, { 232} }, // syntaxExpression
    { {       0}, {  -6} },                    
};

SR_ s_232[] =
{
    { { REQ_DEF}, {  21} },              
    { {     361}, { 233} }, // forOptInc_
    { {     356}, { 234} }, // flowArgs  
    { {     339}, { 235} }, // argsNull  
    { {     347}, { 199} }, // expression
    { {     346}, {  58} }, // exprStart_
    { {      91}, {  59} }, // '['       
    { {     336}, {  60} }, // identifier
    { {      96}, {  61} }, // '`'       
    { {      40}, {  62} }, // '('       
    { {      43}, {  63} }, // '+'       
    { {      45}, {  64} }, // '-'       
    { {     126}, {  65} }, // '~'       
    { {      33}, {  66} }, // '!'       
    { {     315}, {  67} }, // INCDEC    
    { {     345}, {  72} }, // exprUnit_ 
    { {     298}, {  20} }, // IDENTIFIER
    { {     334}, {  78} }, // string    
    { {     302}, {  79} }, // NUMBER    
    { {     333}, {  80} }, // string_   
    { {     304}, {  81} }, // STRING    
    { {       0}, { -32} },              
};

SR_ s_233[] =
{
    { { DEF_RED}, {   2} },                    
    { {     318}, { 236} }, // syntaxCloseParen
    { {       0}, {  -3} },                    
};

SR_ s_234[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 207} }, // ','
    { {       0}, { -94} },       
};

SR_ s_235[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR_ s_236[] =
{
    { { REQ_TOKEN}, {   3} },                     
    { {       330}, { 237} }, // closeParenBreakOK
    { {        41}, { 213} }, // ')'              
    { {         0}, {   0} },                     
};

SR_ s_237[] =
{
    { { ERR_REQ}, {  47} },                   
    { {     372}, { 238} }, // statement      
    { {     371}, {  43} }, // stAlt_         
    { {     332}, {  44} }, // varType        
    { {     368}, {  45} }, // stBreak_       
    { {     369}, {  46} }, // stContinue_    
    { {     370}, {  47} }, // stCompound_    
    { {      59}, {  48} }, // ';'            
    { {     347}, {  49} }, // expression     
    { {     353}, {  50} }, // returnStatement
    { {     355}, {  51} }, // whileStatement 
    { {     367}, {  52} }, // ifStatement    
    { {     362}, {  53} }, // forStatement   
    { { errTok_}, {  54} }, // errTok_        
    { {     331}, {   6} }, // varType_       
    { {     293}, {  55} }, // BREAK          
    { {     294}, {  56} }, // CONTINUE       
    { {     328}, {  57} }, // openCurly      
    { {     346}, {  58} }, // exprStart_     
    { {      91}, {  59} }, // '['            
    { {     336}, {  60} }, // identifier     
    { {      96}, {  61} }, // '`'            
    { {      40}, {  62} }, // '('            
    { {      43}, {  63} }, // '+'            
    { {      45}, {  64} }, // '-'            
    { {     126}, {  65} }, // '~'            
    { {      33}, {  66} }, // '!'            
    { {     315}, {  67} }, // INCDEC         
    { {     352}, {  68} }, // retLeave_      
    { {     354}, {  69} }, // while_         
    { {     363}, {  70} }, // if_            
    { {     360}, {  71} }, // for_           
    { {     300}, {   8} }, // INT            
    { {     305}, {   9} }, // STRINGTYPE     
    { {     301}, {  10} }, // LIST           
    { {     123}, {  28} }, // '{'            
    { {     345}, {  72} }, // exprUnit_      
    { {     298}, {  20} }, // IDENTIFIER     
    { {     303}, {  73} }, // RETURN         
    { {     296}, {  74} }, // EXIT           
    { {     307}, {  75} }, // WHILE          
    { {     299}, {  76} }, // IF             
    { {     297}, {  77} }, // FOR            
    { {     334}, {  78} }, // string         
    { {     302}, {  79} }, // NUMBER         
    { {     333}, {  80} }, // string_        
    { {     304}, {  81} }, // STRING         
    { {       0}, {   0} },                   
};

SR_ s_238[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,
};

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta_
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag_[] = {
    "OPCODE",
    "TOKEN",
    "ARGS",
    "SEMVAL",
    "STRING",
    "<undefined>"
};

size_t const *s_nErrors_;

Base::~Base()
{}

}   // namespace Meta_

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
    Meta_::t_nErrors = &d_nErrors_;
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 56 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 2:
#line 58 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 3:
#line 2 "inc/syntax"
        {
         Error::set(Error::CLOSEPAREN);
         }
        break;

        case 4:
#line 8 "inc/syntax"
        {
         Error::set(Error::COMMA_OR_SEMICOL);
         }
        break;

        case 5:
#line 14 "inc/syntax"
        {
         Error::set(Error::COMMA_OR_CLOSEPAREN);
         }
        break;

        case 6:
#line 20 "inc/syntax"
        {
         Error::set(Error::EXPRESSION);
         }
        break;

        case 7:
#line 26 "inc/syntax"
        {
         Error::set(Error::IDENTIFIER);
         }
        break;

        case 8:
#line 32 "inc/syntax"
        {
         Error::set(Error::INIT);
         }
        break;

        case 9:
#line 38 "inc/syntax"
        {
         Error::set(Error::OPENCURLY);
         }
        break;

        case 10:
#line 44 "inc/syntax"
        {
         Error::set(Error::SEMICOL);
         }
        break;

        case 11:
#line 50 "inc/syntax"
        {
         Error::set(Error::TYPENAME);
         }
        break;

        case 12:
#line 2 "inc/opvalue"
        {
         d_val_ = as<Opcode::Byte>(d_scanner.expr());
         }
        break;

        case 13:
#line 3 "inc/opencurly"
        {
         Error::set(Error::STATEMENT);
         d_symtab.push();
         }
        break;

        case 14:
#line 3 "inc/closecurly"
        {
         d_symtab.pop();
         }
        break;

        case 15:
#line 3 "inc/closeparenbreakok"
        {
         ++d_breakOK;
         }
        break;

        case 16:
#line 3 "inc/vartype"
        {
         d_type = e_int;
         }
        break;

        case 17:
#line 8 "inc/vartype"
        {
         d_type = e_str;
         }
        break;

        case 18:
#line 13 "inc/vartype"
        {
         d_type = e_list;
         }
        break;

        case 19:
#line 20 "inc/vartype"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 20:
#line 3 "inc/string"
        { 
         d_val_ = vs_(-1).get<Tag_::STRING>() + d_scanner.matched(); 
         }
        break;

        case 21:
#line 8 "inc/string"
        {
         d_val_ = d_scanner.matched();
         }
        break;

        case 22:
#line 15 "inc/string"
        { 
         d_val_ = SemVal{ e_str | e_const, 
         as<int>(StringStore::instance().offset(vs_(0).get<Tag_::STRING>())) };
         }
        break;

        case 23:
#line 3 "inc/cast"
        {
         d_val_ = Tokens::INT;
         }
        break;

        case 24:
#line 8 "inc/cast"
        {
         d_val_ = Tokens::LIST;
         }
        break;

        case 25:
#line 13 "inc/cast"
        {
         d_val_ = Tokens::STRINGTYPE;
         }
        break;

        case 26:
#line 18 "inc/cast"
        {
         d_val_ = Tokens::BOOL;
         }
        break;

        case 27:
#line 3 "inc/identifier"
        {
         d_val_ = d_scanner.matched();
         }
        break;

        case 28:
#line 3 "inc/args"
        {
         d_val_ = move(vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 29:
#line 8 "inc/args"
        { 
         d_val_ = SemVal{ e_order, vs_(0).get<Tag_::OPCODE>() };
         }
        break;

        case 30:
#line 17 "inc/args"
        {
         d_val_ = vs_(-2).get<Tag_::ARGS>().add(vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 31:
#line 22 "inc/args"
        {
         d_val_ = Args{ vs_(0).get<Tag_::SEMVAL>() };
         }
        break;

        case 32:
#line 28 "inc/args"
        {
         d_val_ = Args{};
         }
        break;

        case 33:
#line 35 "inc/args"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 34:
#line 37 "inc/args"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 35:
#line 3 "inc/definevar"
        {
         
         
         d_val_ = d_symtab.defineVar(d_type, vs_(0).get<Tag_::STRING>()); 
         }
        break;

        case 36:
#line 13 "inc/definevar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 37:
#line 15 "inc/definevar"
        {
         d_val_ = defineVar(vs_(-3).get<Tag_::SEMVAL>(), vs_(0).get<Tag_::SEMVAL>()); 
         
         }
        break;

        case 38:
#line 3 "inc/globalvars"
        {
         d_initCode << vs_(-1).get<Tag_::SEMVAL>();
         }
        break;

        case 39:
#line 8 "inc/globalvars"
        {
         d_initCode << vs_(-1).get<Tag_::SEMVAL>();
         }
        break;

        case 40:
#line 3 "inc/localvars"
        {
         d_val_ = move(vs_(-3).get<Tag_::SEMVAL>() << vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 41:
#line 8 "inc/localvars"
        {
         d_val_ = move(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 42:
#line 3 "inc/expression"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 43:
#line 5 "inc/expression"
        {
         d_val_ = SemVal{ e_int | e_const, d_scanner.expr() };
         }
        break;

        case 44:
#line 10 "inc/expression"
        {
         d_val_ = variable(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 45:
#line 18 "inc/expression"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 46:
#line 22 "inc/expression"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 47:
#line 24 "inc/expression"
        {
         d_val_ = vs_(-1).get<Tag_::ARGS>().callBuiltin(Builtin::LISTCONST);
         }
        break;

        case 48:
#line 29 "inc/expression"
        {
         d_val_ = index(vs_(-3).get<Tag_::SEMVAL>(), vs_(-1).get<Tag_::SEMVAL>()); 
         }
        break;

        case 49:
#line 34 "inc/expression"
        {
         d_val_ = function(vs_(-3).get<Tag_::STRING>(), move(vs_(-1).get<Tag_::ARGS>())); 
         
         }
        break;

        case 50:
#line 40 "inc/expression"
        {
         d_val_ = function("`", Args{ vs_(-1).get<Tag_::SEMVAL>() }); 
         }
        break;

        case 51:
#line 45 "inc/expression"
        {
         d_val_ = pushPrint(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 52:
#line 50 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>();
         }
        break;

        case 53:
#line 55 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>().negate();
         }
        break;

        case 54:
#line 61 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>().bitNot();
         }
        break;

        case 55:
#line 66 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>().boolNot();
         }
        break;

        case 56:
#line 71 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>().incDec(vs_(-1).get<Tag_::OPCODE>(), e_prefix);
         }
        break;

        case 57:
#line 76 "inc/expression"
        {
         d_val_ = vs_(-2).get<Tag_::SEMVAL>().incDec(vs_(0).get<Tag_::OPCODE>(), e_postfix);
         }
        break;

        case 58:
#line 81 "inc/expression"
        {
         d_val_ = vs_(0).get<Tag_::SEMVAL>().cast(vs_(-2).get<Tag_::TOKEN>());
         }
        break;

        case 59:
#line 86 "inc/expression"
        { 
         d_val_ = vs_(-2).get<Tag_::SEMVAL>().binary(Opcode::add, move(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 60:
#line 91 "inc/expression"
        {
         d_val_ = vs_(-2).get<Tag_::SEMVAL>().binary(Opcode::sub, move(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 61:
#line 96 "inc/expression"
        {
         d_val_ = vs_(-3).get<Tag_::SEMVAL>().binary(vs_(-1).get<Tag_::OPCODE>(), move(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 62:
#line 101 "inc/expression"
        {
         d_val_ = shiftOrPrint(vs_(-3).get<Tag_::SEMVAL>(), vs_(-1).get<Tag_::OPCODE>(), vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 63:
#line 106 "inc/expression"
        {
         d_val_ = binary(vs_(-3).get<Tag_::SEMVAL>(), vs_(-1).get<Tag_::OPCODE>(), vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 64:
#line 111 "inc/expression"
        {
         d_val_ = binary(vs_(-3).get<Tag_::SEMVAL>(), vs_(-1).get<Tag_::OPCODE>(), vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 65:
#line 116 "inc/expression"
        {
         d_val_ = binary(vs_(-2).get<Tag_::SEMVAL>(), Opcode::band, vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 66:
#line 121 "inc/expression"
        {
         d_val_ = binary(vs_(-2).get<Tag_::SEMVAL>(), Opcode::bxor, vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 67:
#line 126 "inc/expression"
        {
         d_val_ = binary(vs_(-2).get<Tag_::SEMVAL>(), Opcode::bor, vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 68:
#line 131 "inc/expression"
        {
         d_val_ = pushPrint(vs_(-2).get<Tag_::SEMVAL>()).logicAnd(pushPrint(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 69:
#line 136 "inc/expression"
        {
         d_val_ = pushPrint(vs_(-2).get<Tag_::SEMVAL>()).logicOr(pushPrint(vs_(0).get<Tag_::SEMVAL>())); 
         }
        break;

        case 70:
#line 141 "inc/expression"
        {
         d_val_ = pushPrint(vs_(-4).get<Tag_::SEMVAL>()).ternary(pushPrint(vs_(-2).get<Tag_::SEMVAL>()), pushPrint(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 71:
#line 146 "inc/expression"
        { 
         d_val_ = vs_(-2).get<Tag_::SEMVAL>().assign(pushPrint(vs_(0).get<Tag_::SEMVAL>()), Opcode::copy_var);
         }
        break;

        case 72:
#line 151 "inc/expression"
        {
         d_val_ = vs_(-3).get<Tag_::SEMVAL>().compound(vs_(-1).get<Tag_::OPCODE>(), pushPrint(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 73:
#line 3 "inc/condition"
        {
         d_val_ = move(vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 74:
#line 10 "inc/condition"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 75:
#line 12 "inc/condition"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 76:
#line 3 "inc/optcondition"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 77:
#line 4 "inc/optcondition"
        {
         d_val_ = SemVal{ e_int | e_const, 1 };
         }
        break;

        case 78:
#line 3 "inc/returnstatement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 79:
#line 4 "inc/returnstatement"
        {
         d_val_ = SemVal{ e_void };
         }
        break;

        case 80:
#line 11 "inc/returnstatement"
        {
         d_val_ = Tokens::RETURN;
         }
        break;

        case 81:
#line 16 "inc/returnstatement"
        {
         d_val_ = Tokens::EXIT;
         }
        break;

        case 82:
#line 23 "inc/returnstatement"
        {
         d_val_ = returnStmnt(vs_(-2).get<Tag_::TOKEN>(), vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 83:
#line 3 "inc/whilestatement"
        {
         push();
         }
        break;

        case 84:
#line 11 "inc/whilestatement"
        {
         d_val_ = forStmnt(Args{}, vs_(-3).get<Tag_::SEMVAL>(), Args{}, vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 85:
#line 3 "inc/flowargs"
        {
         d_val_ = move(vs_(-2).get<Tag_::ARGS>().add(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 86:
#line 8 "inc/flowargs"
        {
         d_val_ = Args{ vs_(0).get<Tag_::SEMVAL>() };
         }
        break;

        case 87:
#line 3 "inc/flowinit"
        {
         d_val_ = move(vs_(-2).get<Tag_::ARGS>().add(vs_(0).get<Tag_::SEMVAL>()));
         }
        break;

        case 88:
#line 8 "inc/flowinit"
        {
         d_val_ = Args{ vs_(0).get<Tag_::SEMVAL>() };
         }
        break;

        case 89:
#line 15 "inc/flowinit"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 90:
#line 17 "inc/flowinit"
        {
         d_val_ = move(vs_(0).get<Tag_::ARGS>());
         }
        break;

        case 91:
#line 3 "inc/optinit"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 92:
#line 5 "inc/optinit"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 93:
#line 3 "inc/forstatement"
        {
         push();
         }
        break;

        case 94:
#line 10 "inc/forstatement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 95:
#line 12 "inc/forstatement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 96:
#line 22 "inc/forstatement"
        {
         d_val_ = forStmnt(move(vs_(-11).get<Tag_::ARGS>()), vs_(-7).get<Tag_::SEMVAL>(), move(vs_(-3).get<Tag_::ARGS>()), vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 97:
#line 3 "inc/ifstatement"
        {
         push();
         }
        break;

        case 98:
#line 10 "inc/ifstatement"
        {
         semValPopPush();
         }
        break;

        case 99:
#line 17 "inc/ifstatement"
        {
         d_val_ = move(vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 100:
#line 21 "inc/ifstatement"
        {
         d_val_ = SemVal{};
         }
        break;

        case 101:
#line 28 "inc/ifstatement"
        {
         d_val_ = Args{ vs_(0).get<Tag_::SEMVAL>() };
         }
        break;

        case 102:
#line 33 "inc/ifstatement"
        {
         d_val_ = Args{ vs_(0).get<Tag_::SEMVAL>() };
         }
        break;

        case 103:
#line 38 "inc/ifstatement"
        {
         d_val_ = move(vs_(-2).get<Tag_::ARGS>().add(vs_(0).get<Tag_::SEMVAL>())); 
         
         
         }
        break;

        case 104:
#line 48 "inc/ifstatement"
        {
         d_val_ = ifStmnt(vs_(-5).get<Tag_::ARGS>(), vs_(-1).get<Tag_::SEMVAL>(), vs_(0).get<Tag_::SEMVAL>()); 
         }
        break;

        case 105:
#line 3 "inc/statement"
        {
         d_val_ = move(breakStmnt());
         }
        break;

        case 106:
#line 10 "inc/statement"
        {
         d_val_ = move(continueStmnt());
         }
        break;

        case 107:
#line 20 "inc/statement"
        {
         d_val_ = move(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 108:
#line 27 "inc/statement"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 109:
#line 29 "inc/statement"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 110:
#line 31 "inc/statement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 111:
#line 33 "inc/statement"
        {
         d_val_ = SemVal{};
         }
        break;

        case 112:
#line 38 "inc/statement"
        {
         d_val_ = exprStmnt(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 113:
#line 43 "inc/statement"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 114:
#line 45 "inc/statement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 115:
#line 47 "inc/statement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 116:
#line 49 "inc/statement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 117:
#line 51 "inc/statement"
        {
         d_val_ = SemVal{};
         }
        break;

        case 118:
#line 58 "inc/statement"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 119:
#line 60 "inc/statement"
        {
         d_val_ = move(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 120:
#line 3 "inc/statements"
        {
         d_val_ = catStatements(vs_(-1).get<Tag_::SEMVAL>(), vs_(0).get<Tag_::SEMVAL>());
         }
        break;

        case 121:
#line 7 "inc/statements"
        {
         d_val_ = SemVal{};
         }
        break;

        case 122:
#line 3 "inc/functiondef"
        {
         d_symtab.defineFunction(d_type, vs_(0).get<Tag_::STRING>());
         }
        break;

        case 123:
#line 10 "inc/functiondef"
        {
         d_symtab.defineVar(d_type, vs_(0).get<Tag_::STRING>());
         }
        break;

        case 124:
#line 17 "inc/functiondef"
        {
            d_val_ = std::move(vs_(-2));
        }
        break;

        case 125:
#line 21 "inc/functiondef"
        {
            d_val_ = std::move(vs_(-3));
        }
        break;

        case 126:
#line 23 "inc/functiondef"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 127:
#line 27 "inc/functiondef"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 129:
#line 33 "inc/functiondef"
        {
         functionHead();
         }
        break;

        case 130:
#line 40 "inc/functiondef"
        {
         functionDefined(vs_(-1).get<Tag_::SEMVAL>());
         }
        break;

        case 131:
#line 3 "inc/defvarorfun"
        {
         d_type = e_void;
         }
        break;

        case 132:
#line 11 "inc/defvarorfun"
        {
            d_val_ = std::move(vs_(-2));
        }
        break;

        case 133:
#line 13 "inc/defvarorfun"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 134:
#line 15 "inc/defvarorfun"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 135:
#line 20 "inc/defvarorfun"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


